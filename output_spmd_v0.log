nohup: ignoring input
WARNING:root:libtpu.so and TPU device found. Setting PJRT_DEVICE=TPU.
INFO 03-18 18:42:21 [__init__.py:256] Automatically detected platform tpu.
INFO 03-18 18:42:21 [api_server.py:912] vLLM API server version 0.7.4.dev339+ga21076ed.d20250318
INFO 03-18 18:42:21 [api_server.py:913] args: Namespace(subparser='serve', model_tag='meta-llama/Meta-Llama-3.1-8B', config='', host=None, port=8000, uvicorn_log_level='info', allow_credentials=False, allowed_origins=['*'], allowed_methods=['*'], allowed_headers=['*'], api_key=None, lora_modules=None, prompt_adapters=None, chat_template=None, chat_template_content_format='auto', response_role='assistant', ssl_keyfile=None, ssl_certfile=None, ssl_ca_certs=None, enable_ssl_refresh=False, ssl_cert_reqs=0, root_path=None, middleware=[], return_tokens_as_token_ids=False, disable_frontend_multiprocessing=False, enable_request_id_headers=False, enable_auto_tool_choice=False, tool_call_parser=None, tool_parser_plugin='', model='meta-llama/Meta-Llama-3.1-8B', task='auto', tokenizer=None, hf_config_path=None, skip_tokenizer_init=False, revision=None, code_revision=None, tokenizer_revision=None, tokenizer_mode='auto', trust_remote_code=False, allowed_local_media_path=None, download_dir='/dev/shm', load_format='auto', config_format=<ConfigFormat.AUTO: 'auto'>, dtype='auto', kv_cache_dtype='auto', max_model_len=512, guided_decoding_backend='xgrammar', logits_processor_pattern=None, model_impl='auto', distributed_executor_backend=None, pipeline_parallel_size=1, tensor_parallel_size=1, enable_expert_parallel=False, max_parallel_loading_workers=None, ray_workers_use_nsight=False, block_size=None, enable_prefix_caching=None, disable_sliding_window=False, use_v2_block_manager=True, num_lookahead_slots=0, seed=None, swap_space=16.0, cpu_offload_gb=0, gpu_memory_utilization=0.5, num_gpu_blocks_override=None, max_num_batched_tokens=512, max_num_partial_prefills=1, max_long_partial_prefills=1, long_prefill_token_threshold=0, max_num_seqs=128, max_logprobs=20, disable_log_stats=False, quantization=None, rope_scaling=None, rope_theta=None, hf_overrides=None, enforce_eager=False, max_seq_len_to_capture=8192, disable_custom_all_reduce=False, tokenizer_pool_size=0, tokenizer_pool_type='ray', tokenizer_pool_extra_config=None, limit_mm_per_prompt=None, mm_processor_kwargs=None, disable_mm_preprocessor_cache=False, enable_lora=False, enable_lora_bias=False, max_loras=1, max_lora_rank=16, lora_extra_vocab_size=256, lora_dtype='auto', long_lora_scaling_factors=None, max_cpu_loras=None, fully_sharded_loras=False, enable_prompt_adapter=False, max_prompt_adapters=1, max_prompt_adapter_token=0, device='auto', num_scheduler_steps=1, use_tqdm_on_load=True, multi_step_stream_outputs=True, scheduler_delay_factor=0.0, enable_chunked_prefill=None, speculative_model=None, speculative_model_quantization=None, num_speculative_tokens=None, speculative_disable_mqa_scorer=False, speculative_draft_tensor_parallel_size=None, speculative_max_model_len=None, speculative_disable_by_batch_size=None, ngram_prompt_lookup_max=None, ngram_prompt_lookup_min=None, spec_decoding_acceptance_method='rejection_sampler', typical_acceptance_sampler_posterior_threshold=None, typical_acceptance_sampler_posterior_alpha=None, disable_logprobs_during_spec_decoding=None, model_loader_extra_config=None, ignore_patterns=[], preemption_mode=None, served_model_name=None, qlora_adapter_name_or_path=None, show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None, disable_async_output_proc=False, scheduling_policy='fcfs', scheduler_cls='vllm.core.scheduler.Scheduler', override_neuron_config=None, override_pooler_config=None, compilation_config=None, kv_transfer_config=None, worker_cls='auto', worker_extension_cls='', generation_config='auto', override_generation_config=None, enable_sleep_mode=False, calculate_kv_scales=False, additional_config=None, enable_reasoning=False, reasoning_parser=None, disable_log_requests=True, max_log_len=None, disable_fastapi_docs=False, enable_prompt_tokens_details=False, dispatch_function=<function ServeSubcommand.cmd at 0x72e5b490a950>)
INFO 03-18 18:42:21 [api_server.py:209] Started engine process with PID 298084
INFO 03-18 18:42:25 [__init__.py:256] Automatically detected platform tpu.
INFO 03-18 18:42:31 [config.py:576] This model supports multiple tasks: {'classify', 'generate', 'embed', 'score', 'reward'}. Defaulting to 'generate'.
INFO 03-18 18:42:31 [tpu.py:76] [TPU] Forcing DYNAMO_ONCE compilation level
INFO 03-18 18:42:31 [llm_engine.py:235] Initializing a V0 LLM engine (v0.7.4.dev339+ga21076ed.d20250318) with config: model='meta-llama/Meta-Llama-3.1-8B', speculative_config=None, tokenizer='meta-llama/Meta-Llama-3.1-8B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=512, download_dir='/dev/shm', load_format=auto, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=None, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar', reasoning_backend=None), observability_config=ObservabilityConfig(show_hidden_metrics=False, otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=None, served_model_name=meta-llama/Meta-Llama-3.1-8B, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"level":2,"backend":"openxla","splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":128}, use_cached_outputs=True, 
INFO 03-18 18:42:32 [config.py:576] This model supports multiple tasks: {'embed', 'reward', 'score', 'classify', 'generate'}. Defaulting to 'generate'.
INFO 03-18 18:42:32 [tpu.py:76] [TPU] Forcing DYNAMO_ONCE compilation level
hosseins: init_worker() self.vllm_config.parallel_config.worker_cls='vllm.worker.tpu_worker.TPUWorker'
INFO 03-18 18:42:46 [utils.py:364] Initializing SPMD engine with mesh=[{'device_ids': [0, 1, 2, 3], 'mesh_shape': (4,), 'axis_names': ('axis',)}]
INFO 03-18 18:42:46 [tpu.py:39] Cannot use None backend on TPU.
INFO 03-18 18:42:46 [tpu.py:45] Using Pallas backend.
hosseins: initialize_model_parallel() world_size=1
hosseins: initialize_model_parallel() all_ranks=tensor([[[0]]])
INFO 03-18 18:42:46 [parallel_state.py:950] rank 0 in world size 1 is assigned as DP rank 0, PP rank 0, TP rank 0
hosseins: get_model_loader() load_config.load_format=<LoadFormat.AUTO: 'auto'>
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
hosseins: Attention. init()
INFO 03-18 18:42:47 [weight_utils.py:258] Using model weights format ['*.safetensors']
Loading safetensors checkpoint shards:   0% Completed | 0/4 [00:00<?, ?it/s]
hosseins: VocabParallelEmbedding -> weight_loader() [start_idx=0]
hosseins: VocabParallelEmbedding -> weight_loader() [shard_size=128256]
hosseins: DefaultModelLoader -> load_weights() name='layers.31.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.31.mlp.down_proj.weight'
INFO 03-18 18:42:48 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:48 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:48 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:48 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:48 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:48 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
Loading safetensors checkpoint shards:  25% Completed | 1/4 [00:01<00:03,  1.27s/it]
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.31.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='norm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.20.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.20.mlp.down_proj.weight'
INFO 03-18 18:42:48 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:48 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:48 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:48 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:48 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:48 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.20.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:49 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:49 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.20.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.21.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.21.mlp.down_proj.weight'
INFO 03-18 18:42:49 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:49 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:49 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:49 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.21.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:49 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:49 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.21.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:49 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:49 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.21.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.21.self_attn.k_proj.weight'
INFO 03-18 18:42:49 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:49 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:49 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:49 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.21.self_attn.o_proj.weight'
INFO 03-18 18:42:49 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.21.self_attn.q_proj.weight'
INFO 03-18 18:42:49 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:49 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.21.self_attn.v_proj.weight'
INFO 03-18 18:42:49 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:49 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:49 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:49 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.22.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.22.mlp.down_proj.weight'
INFO 03-18 18:42:49 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:49 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:49 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:49 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.22.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:49 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:49 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.22.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:49 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:49 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.22.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.22.self_attn.k_proj.weight'
INFO 03-18 18:42:49 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:49 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:49 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:49 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.22.self_attn.o_proj.weight'
INFO 03-18 18:42:49 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.22.self_attn.q_proj.weight'
INFO 03-18 18:42:49 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:49 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.22.self_attn.v_proj.weight'
INFO 03-18 18:42:49 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:49 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:49 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:49 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.23.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.23.mlp.down_proj.weight'
INFO 03-18 18:42:49 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:49 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:49 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:49 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.23.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:49 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:49 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.23.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:49 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:49 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.23.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.23.self_attn.k_proj.weight'
INFO 03-18 18:42:49 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:49 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:49 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:49 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.23.self_attn.o_proj.weight'
INFO 03-18 18:42:49 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.23.self_attn.q_proj.weight'
INFO 03-18 18:42:49 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:49 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.23.self_attn.v_proj.weight'
INFO 03-18 18:42:49 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:49 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:49 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:49 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.24.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.24.mlp.down_proj.weight'
INFO 03-18 18:42:49 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:49 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:49 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:49 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.24.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:49 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:49 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.24.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:49 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:49 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:49 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.24.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.24.self_attn.k_proj.weight'
INFO 03-18 18:42:49 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:49 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:49 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:49 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.24.self_attn.o_proj.weight'
INFO 03-18 18:42:49 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.24.self_attn.q_proj.weight'
INFO 03-18 18:42:49 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:49 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:49 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:49 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.24.self_attn.v_proj.weight'
INFO 03-18 18:42:50 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:50 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.25.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.25.mlp.down_proj.weight'
INFO 03-18 18:42:50 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:50 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:50 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:50 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.25.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:50 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:50 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.25.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:50 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:50 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.25.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.25.self_attn.k_proj.weight'
INFO 03-18 18:42:50 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:50 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.25.self_attn.o_proj.weight'
INFO 03-18 18:42:50 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.25.self_attn.q_proj.weight'
INFO 03-18 18:42:50 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:50 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.25.self_attn.v_proj.weight'
INFO 03-18 18:42:50 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:50 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.26.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.26.mlp.down_proj.weight'
INFO 03-18 18:42:50 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:50 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:50 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:50 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.26.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:50 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:50 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.26.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:50 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:50 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.26.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.26.self_attn.k_proj.weight'
INFO 03-18 18:42:50 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:50 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.26.self_attn.o_proj.weight'
INFO 03-18 18:42:50 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.26.self_attn.q_proj.weight'
INFO 03-18 18:42:50 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:50 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.26.self_attn.v_proj.weight'
INFO 03-18 18:42:50 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:50 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.27.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.27.mlp.down_proj.weight'
INFO 03-18 18:42:50 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:50 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:50 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:50 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.27.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:50 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:50 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.27.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:50 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:50 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.27.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.27.self_attn.k_proj.weight'
INFO 03-18 18:42:50 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:50 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.27.self_attn.o_proj.weight'
INFO 03-18 18:42:50 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.27.self_attn.q_proj.weight'
INFO 03-18 18:42:50 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:50 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.27.self_attn.v_proj.weight'
INFO 03-18 18:42:50 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:50 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.28.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.28.mlp.down_proj.weight'
INFO 03-18 18:42:50 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:50 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:50 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:50 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.28.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:50 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:50 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.28.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:50 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:50 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:50 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.28.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.28.self_attn.k_proj.weight'
INFO 03-18 18:42:50 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:50 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.28.self_attn.o_proj.weight'
INFO 03-18 18:42:50 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.28.self_attn.q_proj.weight'
INFO 03-18 18:42:50 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:50 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:50 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.28.self_attn.v_proj.weight'
INFO 03-18 18:42:50 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:50 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:50 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.29.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.29.mlp.down_proj.weight'
INFO 03-18 18:42:50 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:50 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:50 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:50 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:50 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.29.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:51 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:51 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:51 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:51 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.29.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:51 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:51 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:51 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:51 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.29.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.29.self_attn.k_proj.weight'
INFO 03-18 18:42:51 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:51 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:51 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:51 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.29.self_attn.o_proj.weight'
INFO 03-18 18:42:51 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:51 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:51 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:51 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.29.self_attn.q_proj.weight'
INFO 03-18 18:42:51 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:51 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:51 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:51 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.29.self_attn.v_proj.weight'
INFO 03-18 18:42:51 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:51 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:51 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:51 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.30.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.30.mlp.down_proj.weight'
INFO 03-18 18:42:51 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:51 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:51 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:51 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.30.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:51 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:51 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:51 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:51 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.30.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:51 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:51 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:51 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:51 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.30.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.30.self_attn.k_proj.weight'
INFO 03-18 18:42:51 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:51 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:51 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:51 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.30.self_attn.o_proj.weight'
INFO 03-18 18:42:51 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:51 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:51 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:51 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.30.self_attn.q_proj.weight'
INFO 03-18 18:42:51 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:51 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:51 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:51 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.30.self_attn.v_proj.weight'
INFO 03-18 18:42:51 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:51 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:51 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:51 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.31.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:51 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:51 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:51 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:51 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.31.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:51 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:51 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:51 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:51 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.31.self_attn.k_proj.weight'
INFO 03-18 18:42:51 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:51 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:51 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:51 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.31.self_attn.o_proj.weight'
INFO 03-18 18:42:51 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:51 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:51 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:51 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.31.self_attn.q_proj.weight'
INFO 03-18 18:42:51 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:51 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:51 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:51 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.31.self_attn.v_proj.weight'
INFO 03-18 18:42:51 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:51 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:51 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:51 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
Loading safetensors checkpoint shards:  50% Completed | 2/4 [00:03<00:04,  2.11s/it]
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='embed_tokens.weight'
hosseins: VocabParallelEmbedding -> weight_loader() [start_idx=0]
hosseins: VocabParallelEmbedding -> weight_loader() [shard_size=128256]
hosseins: DefaultModelLoader -> load_weights() name='layers.0.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.0.mlp.down_proj.weight'
INFO 03-18 18:42:51 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:51 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:51 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:51 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:51 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.0.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:52 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:52 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.0.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:52 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:52 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.0.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.0.self_attn.k_proj.weight'
INFO 03-18 18:42:52 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:52 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.0.self_attn.o_proj.weight'
INFO 03-18 18:42:52 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.0.self_attn.q_proj.weight'
INFO 03-18 18:42:52 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:52 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.0.self_attn.v_proj.weight'
INFO 03-18 18:42:52 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:52 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.1.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.1.mlp.down_proj.weight'
INFO 03-18 18:42:52 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:52 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:52 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:52 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.1.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:52 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:52 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.1.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:52 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:52 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.1.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.1.self_attn.k_proj.weight'
INFO 03-18 18:42:52 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:52 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.1.self_attn.o_proj.weight'
INFO 03-18 18:42:52 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.1.self_attn.q_proj.weight'
INFO 03-18 18:42:52 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:52 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.1.self_attn.v_proj.weight'
INFO 03-18 18:42:52 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:52 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.2.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.2.mlp.down_proj.weight'
INFO 03-18 18:42:52 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:52 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:52 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:52 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.2.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:52 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:52 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.2.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:52 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:52 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.2.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.2.self_attn.k_proj.weight'
INFO 03-18 18:42:52 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:52 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.2.self_attn.o_proj.weight'
INFO 03-18 18:42:52 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.2.self_attn.q_proj.weight'
INFO 03-18 18:42:52 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:52 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.2.self_attn.v_proj.weight'
INFO 03-18 18:42:52 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:52 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.3.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.3.mlp.down_proj.weight'
INFO 03-18 18:42:52 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:52 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:52 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:52 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.3.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:52 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:52 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.3.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:52 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:52 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:52 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.3.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.3.self_attn.k_proj.weight'
INFO 03-18 18:42:52 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:52 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.3.self_attn.o_proj.weight'
INFO 03-18 18:42:52 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.3.self_attn.q_proj.weight'
INFO 03-18 18:42:52 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:52 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:52 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.3.self_attn.v_proj.weight'
INFO 03-18 18:42:52 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:52 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:52 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.4.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.4.mlp.down_proj.weight'
INFO 03-18 18:42:52 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:52 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:52 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:52 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:52 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.4.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:53 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:53 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.4.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:53 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:53 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.4.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.4.self_attn.k_proj.weight'
INFO 03-18 18:42:53 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:53 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.4.self_attn.o_proj.weight'
INFO 03-18 18:42:53 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.4.self_attn.q_proj.weight'
INFO 03-18 18:42:53 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:53 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.4.self_attn.v_proj.weight'
INFO 03-18 18:42:53 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:53 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.5.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.5.mlp.down_proj.weight'
INFO 03-18 18:42:53 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:53 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:53 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:53 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.5.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:53 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:53 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.5.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:53 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:53 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.5.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.5.self_attn.k_proj.weight'
INFO 03-18 18:42:53 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:53 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.5.self_attn.o_proj.weight'
INFO 03-18 18:42:53 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.5.self_attn.q_proj.weight'
INFO 03-18 18:42:53 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:53 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.5.self_attn.v_proj.weight'
INFO 03-18 18:42:53 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:53 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.6.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.6.mlp.down_proj.weight'
INFO 03-18 18:42:53 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:53 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:53 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:53 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.6.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:53 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:53 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.6.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:53 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:53 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.6.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.6.self_attn.k_proj.weight'
INFO 03-18 18:42:53 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:53 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.6.self_attn.o_proj.weight'
INFO 03-18 18:42:53 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.6.self_attn.q_proj.weight'
INFO 03-18 18:42:53 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:53 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.6.self_attn.v_proj.weight'
INFO 03-18 18:42:53 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:53 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.7.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.7.mlp.down_proj.weight'
INFO 03-18 18:42:53 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:53 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:53 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:53 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.7.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:53 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:53 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.7.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:53 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:53 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.7.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.7.self_attn.k_proj.weight'
INFO 03-18 18:42:53 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:53 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.7.self_attn.o_proj.weight'
INFO 03-18 18:42:53 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.7.self_attn.q_proj.weight'
INFO 03-18 18:42:53 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:53 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:53 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.7.self_attn.v_proj.weight'
INFO 03-18 18:42:53 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:53 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:53 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.8.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.8.mlp.down_proj.weight'
INFO 03-18 18:42:53 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:53 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:53 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:53 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.8.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:53 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:53 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.8.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:53 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:53 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:53 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:53 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.8.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.8.self_attn.k_proj.weight'
INFO 03-18 18:42:54 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:54 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.8.self_attn.o_proj.weight'
INFO 03-18 18:42:54 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.8.self_attn.q_proj.weight'
INFO 03-18 18:42:54 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:54 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.8.self_attn.v_proj.weight'
INFO 03-18 18:42:54 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:54 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
Loading safetensors checkpoint shards:  75% Completed | 3/4 [00:06<00:02,  2.28s/it]
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.10.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.10.mlp.down_proj.weight'
INFO 03-18 18:42:54 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:54 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:54 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:54 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.10.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:54 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:54 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:54 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:54 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.10.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:54 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:54 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:54 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:54 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.10.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.10.self_attn.k_proj.weight'
INFO 03-18 18:42:54 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:54 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.10.self_attn.o_proj.weight'
INFO 03-18 18:42:54 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.10.self_attn.q_proj.weight'
INFO 03-18 18:42:54 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:54 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.10.self_attn.v_proj.weight'
INFO 03-18 18:42:54 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:54 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.11.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.11.mlp.down_proj.weight'
INFO 03-18 18:42:54 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:54 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:54 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:54 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.11.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:54 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:54 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:54 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:54 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.11.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:54 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:54 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:54 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:54 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.11.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.11.self_attn.k_proj.weight'
INFO 03-18 18:42:54 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:54 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.11.self_attn.o_proj.weight'
INFO 03-18 18:42:54 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.11.self_attn.q_proj.weight'
INFO 03-18 18:42:54 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:54 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.11.self_attn.v_proj.weight'
INFO 03-18 18:42:54 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:54 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.12.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.12.mlp.down_proj.weight'
INFO 03-18 18:42:54 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:54 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:54 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:54 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.12.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:54 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:54 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:54 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:54 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.12.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:54 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:54 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:54 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:54 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.12.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.12.self_attn.k_proj.weight'
INFO 03-18 18:42:54 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:54 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.12.self_attn.o_proj.weight'
INFO 03-18 18:42:54 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.12.self_attn.q_proj.weight'
INFO 03-18 18:42:54 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:54 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:54 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.12.self_attn.v_proj.weight'
INFO 03-18 18:42:54 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:54 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:54 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.13.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.13.mlp.down_proj.weight'
INFO 03-18 18:42:54 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:54 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:54 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:54 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.13.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:54 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:54 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:54 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:54 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:54 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.13.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:55 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:55 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.13.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.13.self_attn.k_proj.weight'
INFO 03-18 18:42:55 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:55 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.13.self_attn.o_proj.weight'
INFO 03-18 18:42:55 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.13.self_attn.q_proj.weight'
INFO 03-18 18:42:55 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:55 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.13.self_attn.v_proj.weight'
INFO 03-18 18:42:55 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:55 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.14.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.14.mlp.down_proj.weight'
INFO 03-18 18:42:55 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:55 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:55 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:55 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.14.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:55 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:55 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.14.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:55 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:55 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.14.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.14.self_attn.k_proj.weight'
INFO 03-18 18:42:55 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:55 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.14.self_attn.o_proj.weight'
INFO 03-18 18:42:55 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.14.self_attn.q_proj.weight'
INFO 03-18 18:42:55 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:55 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.14.self_attn.v_proj.weight'
INFO 03-18 18:42:55 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:55 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.15.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.15.mlp.down_proj.weight'
INFO 03-18 18:42:55 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:55 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:55 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:55 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.15.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:55 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:55 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.15.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:55 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:55 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.15.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.15.self_attn.k_proj.weight'
INFO 03-18 18:42:55 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:55 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.15.self_attn.o_proj.weight'
INFO 03-18 18:42:55 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.15.self_attn.q_proj.weight'
INFO 03-18 18:42:55 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:55 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.15.self_attn.v_proj.weight'
INFO 03-18 18:42:55 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:55 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.16.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.16.mlp.down_proj.weight'
INFO 03-18 18:42:55 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:55 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:55 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:55 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.16.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:55 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:55 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.16.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:55 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:55 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.16.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.16.self_attn.k_proj.weight'
INFO 03-18 18:42:55 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:55 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.16.self_attn.o_proj.weight'
INFO 03-18 18:42:55 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.16.self_attn.q_proj.weight'
INFO 03-18 18:42:55 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:55 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.16.self_attn.v_proj.weight'
INFO 03-18 18:42:55 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:55 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.17.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.17.mlp.down_proj.weight'
INFO 03-18 18:42:55 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:55 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:55 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:55 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.17.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:55 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:55 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.17.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:55 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:55 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:55 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.17.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.17.self_attn.k_proj.weight'
INFO 03-18 18:42:55 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:55 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:55 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.17.self_attn.o_proj.weight'
INFO 03-18 18:42:55 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:55 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:55 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.17.self_attn.q_proj.weight'
INFO 03-18 18:42:56 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:56 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.17.self_attn.v_proj.weight'
INFO 03-18 18:42:56 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:56 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.18.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.18.mlp.down_proj.weight'
INFO 03-18 18:42:56 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:56 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:56 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:56 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.18.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:56 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:56 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:56 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:56 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.18.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:56 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:56 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:56 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:56 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.18.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.18.self_attn.k_proj.weight'
INFO 03-18 18:42:56 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:56 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.18.self_attn.o_proj.weight'
INFO 03-18 18:42:56 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.18.self_attn.q_proj.weight'
INFO 03-18 18:42:56 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:56 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.18.self_attn.v_proj.weight'
INFO 03-18 18:42:56 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:56 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.19.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.19.mlp.down_proj.weight'
INFO 03-18 18:42:56 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:56 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:56 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:56 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.19.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:56 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:56 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:56 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:56 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.19.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:56 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:56 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:56 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:56 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.19.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.19.self_attn.k_proj.weight'
INFO 03-18 18:42:56 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:56 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.19.self_attn.o_proj.weight'
INFO 03-18 18:42:56 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.19.self_attn.q_proj.weight'
INFO 03-18 18:42:56 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:56 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.19.self_attn.v_proj.weight'
INFO 03-18 18:42:56 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:56 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.20.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:56 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:56 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:56 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:56 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.20.self_attn.k_proj.weight'
INFO 03-18 18:42:56 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:56 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.20.self_attn.o_proj.weight'
INFO 03-18 18:42:56 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.20.self_attn.q_proj.weight'
INFO 03-18 18:42:56 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:56 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.20.self_attn.v_proj.weight'
INFO 03-18 18:42:56 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:56 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.9.input_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.9.mlp.down_proj.weight'
INFO 03-18 18:42:56 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:56 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:56 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 14336])]
INFO 03-18 18:42:56 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 14336])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.9.mlp.gate_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
INFO 03-18 18:42:56 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:56 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:56 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:56 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{replicated}'
hosseins: DefaultModelLoader -> load_weights() name='layers.9.mlp.up_proj.weight'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 1 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 2 get_shard_spec(param_data.data)=''
INFO 03-18 18:42:56 [linear.py:679] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:680] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:681] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.shape=torch.Size([28672, 4096])]
INFO 03-18 18:42:56 [linear.py:682] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:56 [linear.py:683] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([14336, 4096])]
INFO 03-18 18:42:56 [linear.py:684] hosseins: MergedColumnParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([28672, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: MergedColumnParallelLinear -> weight_loader() 3 get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.9.post_attention_layernorm.weight'
hosseins: DefaultModelLoader -> load_weights() name='layers.9.self_attn.k_proj.weight'
INFO 03-18 18:42:56 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:56 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.9.self_attn.o_proj.weight'
INFO 03-18 18:42:56 [linear.py:1248] hosseins: RowParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1249] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1250] hosseins: RowParallelLinear -> weight_loader() 2 [param.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1251] hosseins: RowParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1252] hosseins: RowParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1253] hosseins: RowParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([4096, 4096])]
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[1,4]0,1,2,3}'
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: RowParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[1,4]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.9.self_attn.q_proj.weight'
INFO 03-18 18:42:56 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:56 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([4096, 4096])]
INFO 03-18 18:42:56 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: DefaultModelLoader -> load_weights() name='layers.9.self_attn.v_proj.weight'
INFO 03-18 18:42:56 [linear.py:1114] hosseins: QKVParallelLinear -> weight_loader() 2 [param.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1115] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.device=device(type='xla', index=0)]
INFO 03-18 18:42:56 [linear.py:1116] hosseins: QKVParallelLinear -> weight_loader() 2 [param.shape=torch.Size([6144, 4096])]
INFO 03-18 18:42:56 [linear.py:1117] hosseins: QKVParallelLinear -> weight_loader() 2 [loaded_weight.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1118] hosseins: QKVParallelLinear -> weight_loader() 2 [param_data.shape=torch.Size([1024, 4096])]
INFO 03-18 18:42:56 [linear.py:1119] hosseins: QKVParallelLinear -> weight_loader() 2 [param.data.shape=torch.Size([6144, 4096])]
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param.data)='{devices=[4,1]0,1,2,3}'
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:09<00:00,  2.46s/it]
Loading safetensors checkpoint shards: 100% Completed | 4/4 [00:09<00:00,  2.29s/it]

hosseins: QKVParallelLinear -> weight_loader() get_shard_spec(param_data.data)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() is completed
hosseins: load_weights() name='embed_tokens.weight'
hosseins: load_weights() param.shape=torch.Size([128256, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.0.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.0.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.0.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.0.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.0.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.0.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.1.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.1.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.1.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.1.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.1.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.1.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.2.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.2.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.2.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.2.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.2.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.2.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.3.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.3.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.3.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.3.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.3.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.3.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.4.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.4.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.4.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.4.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.4.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.4.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.5.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.5.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.5.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.5.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.5.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.5.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.6.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.6.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.6.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.6.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.6.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.6.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.7.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.7.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.7.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.7.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.7.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.7.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.8.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.8.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.8.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.8.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.8.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.8.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.9.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.9.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.9.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.9.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.9.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.9.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.10.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.10.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.10.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.10.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.10.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.10.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.11.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.11.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.11.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.11.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.11.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.11.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.12.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.12.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.12.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.12.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.12.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.12.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.13.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.13.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.13.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.13.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.13.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.13.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.14.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.14.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.14.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.14.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.14.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.14.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.15.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.15.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.15.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.15.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.15.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.15.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.16.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.16.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.16.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.16.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.16.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.16.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.17.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.17.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.17.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.17.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.17.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.17.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.18.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.18.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.18.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.18.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.18.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.18.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.19.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.19.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.19.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.19.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.19.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.19.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.20.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.20.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.20.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.20.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.20.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.20.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.21.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.21.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.21.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.21.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.21.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.21.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.22.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.22.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.22.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.22.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.22.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.22.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.23.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.23.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.23.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.23.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.23.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.23.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.24.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.24.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.24.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.24.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.24.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.24.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.25.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.25.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.25.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.25.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.25.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.25.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.26.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.26.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.26.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.26.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.26.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.26.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.27.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.27.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.27.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.27.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.27.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.27.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.28.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.28.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.28.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.28.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.28.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.28.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.29.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.29.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.29.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.29.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.29.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.29.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.30.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.30.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.30.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.30.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.30.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.30.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.31.self_attn.qkv_proj.weight'
hosseins: load_weights() param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.31.self_attn.o_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.31.mlp.gate_up_proj.weight'
hosseins: load_weights() param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: load_weights() name='layers.31.mlp.down_proj.weight'
hosseins: load_weights() param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: load_weights() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: load_weights() name='layers.31.input_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='layers.31.post_attention_layernorm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
hosseins: load_weights() name='norm.weight'
hosseins: load_weights() param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: load_weights() get_shard_spec(param)='{replicated}'
INFO 03-18 18:42:57 [loader.py:430] Loading weights took 9.44 seconds
WARNING 03-18 18:42:57 [tpu.py:116] Pin memory is not supported on TPU.
hosseins: LlamaForCasualLM.forward()
hosseins: LlamaModel.forward()
hosseins: LlamaModel.forward() get_pp_group().is_first_rank=True
hosseins: VocabParallelEmbedding.forward()
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: VocabParallelEmbedding.forward() [get_shard_spec(masked_input)='']
hosseins: UnquantizedEmbeddingMethod -> embedding()
hosseins: UnquantizedEmbeddingMethod -> embedding() [layer.weight.shape=torch.Size([128256, 4096])]
hosseins: UnquantizedEmbeddingMethod -> embedding() [layer.weight.device=device(type='xla', index=0)]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: VocabParallelEmbedding.forward() [get_shard_spec(output_parallel)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: VocabParallelEmbedding.forward() [get_shard_spec(output)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() 1 get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() layer start
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() ============= type(layer)=<class 'vllm.model_executor.models.llama.LlamaDecoderLayer'> =============
hosseins: LlamaModel.forward() Name: self_attn.qkv_proj.weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: self_attn.o_proj.weight, Shape: param.shape=torch.Size([4096, 4096])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.gate_up_proj.weight, Shape: param.shape=torch.Size([28672, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: LlamaModel.forward() Name: mlp.down_proj.weight, Shape: param.shape=torch.Size([4096, 14336])
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{devices=[1,4]0,1,2,3}'
hosseins: LlamaModel.forward() Name: input_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaModel.forward() Name: post_attention_layernorm.weight, Shape: param.shape=torch.Size([4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaModel.forward() get_shard_spec(param)='{replicated}'
hosseins: LlamaDecoderLayer.forward()
hosseins: LlamaAttention.forward()
hosseins: LlamaAttention.forward() hidden_states.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() hidden_states.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaAttention.forward() self.qkv_proj=QKVParallelLinear(in_features=4096, output_features=6144, bias=False, tp_size=1, gather_output=False)
hosseins: LlamaAttention.forward() Name: weight, Shape: param.shape=torch.Size([6144, 4096])
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: LlamaAttention.forward() get_shard_spec(param)='{devices=[4,1]0,1,2,3}'
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.QKVParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([6144, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 6144]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: LlamaAttention.forward() qkv.shape=torch.Size([1, 512, 6144])
hosseins: LlamaAttention.forward() qkv.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(qkv)=''
hosseins: Attention. forward()
hosseins: Attention -> forward() key.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(key)='' value.shape=torch.Size([1, 512, 1024])
hosseins: Attention -> forward() value.shape=torch.Size([1, 512, 1024])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: Attention -> forward() get_shard_spec(value)='' value.shape=torch.Size([1, 512, 1024])
hosseins: PallasAttentionBackendImpl -> forward() 1 [query.shape=torch.Size([1, 512, 4096])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(query)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value.shape=torch.Size([1, 512, 1024])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [key_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(key_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 1 [value_cache.shape=torch.Size([0])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_shard_spec(value_cache)='']
hosseins: PallasAttentionBackendImpl -> forward() 2 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 2 [value.shape=torch.Size([1, 512, 8, 128])]
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(query)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(key)='']
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: PallasAttentionBackendImpl -> forward() 2 [get_shard_spec(value)='']
hosseins: PallasAttentionBackendImpl -> forward() 3 [query.shape=torch.Size([1, 512, 32, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [key.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 3 [value.shape=torch.Size([1, 512, 8, 128])]
hosseins: PallasAttentionBackendImpl -> forward() 1 [get_device_ids()=array([0, 1, 2, 3])]
hosseins: LlamaAttention.forward() attn_output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() attn_output.device=device(type='xla', index=0)
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 4096]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaAttention.forward() output.shape=torch.Size([1, 512, 4096])
hosseins: LlamaAttention.forward() output.device=device(type='xla', index=0)
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaDecoderLayer.forward() residual.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(residual)=''
hosseins: LlamaMLP.forward()
hosseins: LlamaMLP.forward() x.shape=torch.Size([1, 512, 4096])
hosseins: LlamaMLP.forward() x.device=device(type='xla', index=0)
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaMLP.forward() get_shard_spec(x)=''
hosseins: ColumnParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.MergedColumnParallelLinear'>
hosseins: ColumnParallelLinear -> forward() type(self.quant_method)=<class 'vllm.model_executor.layers.linear.UnquantizedLinearMethod'>
┌───────┐
│       │
│ TPU 0 │
│       │
├───────┤
│       │
│ TPU 1 │
│       │
├───────┤
│       │
│ TPU 2 │
│       │
├───────┤
│       │
│ TPU 3 │
│       │
└───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([28672, 4096]) get_shard_spec(layer.weight)='{devices=[4,1]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 4096]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 28672]) get_shard_spec(out)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: ColumnParallelLinear -> forward() get_shard_spec(output)=''
hosseins: RowParallelLinear -> forward() type(self)=<class 'vllm.model_executor.layers.linear.RowParallelLinear'>
┌───────┬───────┬───────┬───────┐
│       │       │       │       │
│ TPU 0 │ TPU 1 │ TPU 2 │ TPU 3 │
│       │       │       │       │
└───────┴───────┴───────┴───────┘
hosseins: UnquantizedLinearMethod -> apply() layer.weight.shape=torch.Size([4096, 14336]) get_shard_spec(layer.weight)='{devices=[1,4]0,1,2,3}'
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() x.shape=torch.Size([1, 512, 14336]) get_shard_spec(x)=''
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: UnquantizedLinearMethod -> apply() out.shape=torch.Size([1, 512, 4096]) get_shard_spec(out)=''
hosseins: LlamaDecoderLayer.forward() hidden_states.shape=torch.Size([1, 512, 4096])
┌──────────────────┐
│                  │
│ TPU [0, 1, 2, 3] │
│                  │
└──────────────────┘
hosseins: LlamaAttention.forward() get_shard_spec(hidden_states)=''
hosseins: LlamaModel.forward() layer end
hosseins: LlamaModel.forward() norm start
hosseins: LlamaModel.forward() norm end
hosseins: UnquantizedEmbeddingMethod -> apply()
hosseins: UnquantizedEmbeddingMethod -> apply() [layer.weight.shape=torch.Size([128256, 4096])]
hosseins: UnquantizedEmbeddingMethod -> apply() [layer.weight.device=device(type='xla', index=0)]
ERROR 03-18 18:42:58 [engine.py:409] torch_xla/csrc/runtime/pjrt_computation_client.cc:990 : Check failed: device != spmd_device_str (SPMD:0 vs. SPMD:0)
ERROR 03-18 18:42:58 [engine.py:409] *** Begin stack trace ***
ERROR 03-18 18:42:58 [engine.py:409] 	tsl::CurrentStackTrace[abi:cxx11]()
ERROR 03-18 18:42:58 [engine.py:409] 	torch_xla::runtime::PjRtComputationClient::GetMemoryInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	_PyObject_MakeTpCall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyObject_FastCallDictTstate
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	PyObject_Call
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyObject_FastCallDictTstate
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	_PyObject_MakeTpCall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	PyEval_EvalCode
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	PyRun_StringFlags
ERROR 03-18 18:42:58 [engine.py:409] 	PyRun_SimpleStringFlags
ERROR 03-18 18:42:58 [engine.py:409] 	Py_RunMain
ERROR 03-18 18:42:58 [engine.py:409] 	Py_BytesMain
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	__libc_start_main
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] *** End stack trace ***
ERROR 03-18 18:42:58 [engine.py:409] MemoryInfo not supported for SPMD virtual device.
ERROR 03-18 18:42:58 [engine.py:409] Traceback (most recent call last):
ERROR 03-18 18:42:58 [engine.py:409]   File "/home/hosseins/vllm-v1/vllm/engine/multiprocessing/engine.py", line 400, in run_mp_engine
ERROR 03-18 18:42:58 [engine.py:409]     engine = MQLLMEngine.from_engine_args(engine_args=engine_args,
ERROR 03-18 18:42:58 [engine.py:409]   File "/home/hosseins/vllm-v1/vllm/engine/multiprocessing/engine.py", line 125, in from_engine_args
ERROR 03-18 18:42:58 [engine.py:409]     return cls(ipc_path=ipc_path,
ERROR 03-18 18:42:58 [engine.py:409]   File "/home/hosseins/vllm-v1/vllm/engine/multiprocessing/engine.py", line 77, in __init__
ERROR 03-18 18:42:58 [engine.py:409]     self.engine = LLMEngine(*args, **kwargs)
ERROR 03-18 18:42:58 [engine.py:409]   File "/home/hosseins/vllm-v1/vllm/engine/llm_engine.py", line 277, in __init__
ERROR 03-18 18:42:58 [engine.py:409]     self._initialize_kv_caches()
ERROR 03-18 18:42:58 [engine.py:409]   File "/home/hosseins/vllm-v1/vllm/engine/llm_engine.py", line 426, in _initialize_kv_caches
ERROR 03-18 18:42:58 [engine.py:409]     self.model_executor.determine_num_available_blocks())
ERROR 03-18 18:42:58 [engine.py:409]   File "/home/hosseins/vllm-v1/vllm/executor/executor_base.py", line 102, in determine_num_available_blocks
ERROR 03-18 18:42:58 [engine.py:409]     results = self.collective_rpc("determine_num_available_blocks")
ERROR 03-18 18:42:58 [engine.py:409]   File "/home/hosseins/vllm-v1/vllm/executor/uniproc_executor.py", line 56, in collective_rpc
ERROR 03-18 18:42:58 [engine.py:409]     answer = run_method(self.driver_worker, method, args, kwargs)
ERROR 03-18 18:42:58 [engine.py:409]   File "/home/hosseins/vllm-v1/vllm/utils.py", line 2241, in run_method
ERROR 03-18 18:42:58 [engine.py:409]     return func(*args, **kwargs)
ERROR 03-18 18:42:58 [engine.py:409]   File "/home/hosseins/vllm-v1/vllm/worker/tpu_worker.py", line 153, in determine_num_available_blocks
ERROR 03-18 18:42:58 [engine.py:409]     m = xm.get_memory_info(self.device)
ERROR 03-18 18:42:58 [engine.py:409]   File "/home/hosseins/miniconda3/envs/vllm-v1/lib/python3.10/site-packages/torch_xla/core/xla_model.py", line 1563, in get_memory_info
ERROR 03-18 18:42:58 [engine.py:409]     return torch_xla._XLAC._xla_memory_info(str(device))
ERROR 03-18 18:42:58 [engine.py:409] RuntimeError: torch_xla/csrc/runtime/pjrt_computation_client.cc:990 : Check failed: device != spmd_device_str (SPMD:0 vs. SPMD:0)
ERROR 03-18 18:42:58 [engine.py:409] *** Begin stack trace ***
ERROR 03-18 18:42:58 [engine.py:409] 	tsl::CurrentStackTrace[abi:cxx11]()
ERROR 03-18 18:42:58 [engine.py:409] 	torch_xla::runtime::PjRtComputationClient::GetMemoryInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	_PyObject_MakeTpCall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyObject_FastCallDictTstate
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	PyObject_Call
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyObject_FastCallDictTstate
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	_PyObject_MakeTpCall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	_PyFunction_Vectorcall
ERROR 03-18 18:42:58 [engine.py:409] 	_PyEval_EvalFrameDefault
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	PyEval_EvalCode
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	PyRun_StringFlags
ERROR 03-18 18:42:58 [engine.py:409] 	PyRun_SimpleStringFlags
ERROR 03-18 18:42:58 [engine.py:409] 	Py_RunMain
ERROR 03-18 18:42:58 [engine.py:409] 	Py_BytesMain
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] 	__libc_start_main
ERROR 03-18 18:42:58 [engine.py:409] 	
ERROR 03-18 18:42:58 [engine.py:409] *** End stack trace ***
ERROR 03-18 18:42:58 [engine.py:409] MemoryInfo not supported for SPMD virtual device.
Process SpawnProcess-1:
Traceback (most recent call last):
  File "/home/hosseins/miniconda3/envs/vllm-v1/lib/python3.10/multiprocessing/process.py", line 314, in _bootstrap
    self.run()
  File "/home/hosseins/miniconda3/envs/vllm-v1/lib/python3.10/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/home/hosseins/vllm-v1/vllm/engine/multiprocessing/engine.py", line 411, in run_mp_engine
    raise e
  File "/home/hosseins/vllm-v1/vllm/engine/multiprocessing/engine.py", line 400, in run_mp_engine
    engine = MQLLMEngine.from_engine_args(engine_args=engine_args,
  File "/home/hosseins/vllm-v1/vllm/engine/multiprocessing/engine.py", line 125, in from_engine_args
    return cls(ipc_path=ipc_path,
  File "/home/hosseins/vllm-v1/vllm/engine/multiprocessing/engine.py", line 77, in __init__
    self.engine = LLMEngine(*args, **kwargs)
  File "/home/hosseins/vllm-v1/vllm/engine/llm_engine.py", line 277, in __init__
    self._initialize_kv_caches()
  File "/home/hosseins/vllm-v1/vllm/engine/llm_engine.py", line 426, in _initialize_kv_caches
    self.model_executor.determine_num_available_blocks())
  File "/home/hosseins/vllm-v1/vllm/executor/executor_base.py", line 102, in determine_num_available_blocks
    results = self.collective_rpc("determine_num_available_blocks")
  File "/home/hosseins/vllm-v1/vllm/executor/uniproc_executor.py", line 56, in collective_rpc
    answer = run_method(self.driver_worker, method, args, kwargs)
  File "/home/hosseins/vllm-v1/vllm/utils.py", line 2241, in run_method
    return func(*args, **kwargs)
  File "/home/hosseins/vllm-v1/vllm/worker/tpu_worker.py", line 153, in determine_num_available_blocks
    m = xm.get_memory_info(self.device)
  File "/home/hosseins/miniconda3/envs/vllm-v1/lib/python3.10/site-packages/torch_xla/core/xla_model.py", line 1563, in get_memory_info
    return torch_xla._XLAC._xla_memory_info(str(device))
RuntimeError: torch_xla/csrc/runtime/pjrt_computation_client.cc:990 : Check failed: device != spmd_device_str (SPMD:0 vs. SPMD:0)
*** Begin stack trace ***
	tsl::CurrentStackTrace[abi:cxx11]()
	torch_xla::runtime::PjRtComputationClient::GetMemoryInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
	
	
	
	
	_PyObject_MakeTpCall
	_PyEval_EvalFrameDefault
	_PyFunction_Vectorcall
	_PyEval_EvalFrameDefault
	
	_PyEval_EvalFrameDefault
	_PyFunction_Vectorcall
	_PyEval_EvalFrameDefault
	_PyFunction_Vectorcall
	_PyEval_EvalFrameDefault
	_PyFunction_Vectorcall
	_PyEval_EvalFrameDefault
	_PyFunction_Vectorcall
	_PyEval_EvalFrameDefault
	_PyFunction_Vectorcall
	_PyObject_FastCallDictTstate
	
	
	PyObject_Call
	_PyEval_EvalFrameDefault
	_PyFunction_Vectorcall
	_PyObject_FastCallDictTstate
	
	_PyObject_MakeTpCall
	_PyEval_EvalFrameDefault
	
	_PyEval_EvalFrameDefault
	_PyFunction_Vectorcall
	_PyEval_EvalFrameDefault
	_PyFunction_Vectorcall
	_PyEval_EvalFrameDefault
	_PyFunction_Vectorcall
	_PyEval_EvalFrameDefault
	_PyFunction_Vectorcall
	_PyEval_EvalFrameDefault
	_PyFunction_Vectorcall
	_PyEval_EvalFrameDefault
	
	PyEval_EvalCode
	
	
	PyRun_StringFlags
	PyRun_SimpleStringFlags
	Py_RunMain
	Py_BytesMain
	
	__libc_start_main
	
*** End stack trace ***
MemoryInfo not supported for SPMD virtual device.
https://symbolize.stripped_domain/r/?trace=77db482b7ebc,77df6864251f,77db4823e224,77db482b8730,77db482b8b30,77db457e6ff9,77db3fe913ec,77db3ec8077b,77db3ec803a5,77db3ccb9493,77db3ccb984d,77db3cc505b9,77dc7697279d,77dc7433c444,77dc7433c591,77dc6e5ee3e4,77dc6e5ee5a1,77df68645494&map= 
*** SIGTERM received by PID 298084 (TID 298084) on cpu 45 from PID 297681; stack trace: ***
PC: @     0x77db482b7ebc  (unknown)  (unknown)
    @     0x77db4823b935       1888  (unknown)
    @     0x77df68642520  (unknown)  (unknown)
    @     0x77db4823e225         64  (unknown)
    @     0x77db482b8731         64  (unknown)
    @     0x77db482b8b31        128  (unknown)
    @     0x77db457e6ffa        192  (unknown)
    @     0x77db3fe913ed         96  (unknown)
    @     0x77db3ec8077c         80  (unknown)
    @     0x77db3ec803a6         48  (unknown)
    @     0x77db3ccb9494         64  (unknown)
    @     0x77db3ccb984e         32  (unknown)
    @     0x77db3cc505ba         32  (unknown)
    @     0x77dc7697279e         80  std::_Function_handler<>::_M_invoke()
    @     0x77dc7433c445         96  xla::PjRtCApiClient::~PjRtCApiClient()
    @     0x77dc7433c592         32  xla::PjRtCApiClient::~PjRtCApiClient()
    @     0x77dc6e5ee3e5         48  torch_xla::runtime::PjRtComputationClient::~PjRtComputationClient()
    @     0x77dc6e5ee5a2         32  torch_xla::runtime::PjRtComputationClient::~PjRtComputationClient()
    @     0x77df68645495  (unknown)  (unknown)
https://symbolize.stripped_domain/r/?trace=77db482b7ebc,77db4823b934,77df6864251f,77db4823e224,77db482b8730,77db482b8b30,77db457e6ff9,77db3fe913ec,77db3ec8077b,77db3ec803a5,77db3ccb9493,77db3ccb984d,77db3cc505b9,77dc7697279d,77dc7433c444,77dc7433c591,77dc6e5ee3e4,77dc6e5ee5a1,77df68645494&map= 
E0318 18:43:04.250651  298084 coredump_hook.cc:247] RAW: Remote crash gathering disabled for SIGTERM.
E0318 18:43:04.352172  298084 process_state.cc:807] RAW: Raising signal 15 with default behavior
Traceback (most recent call last):
  File "/home/hosseins/miniconda3/envs/vllm-v1/bin/vllm", line 33, in <module>
    sys.exit(load_entry_point('vllm', 'console_scripts', 'vllm')())
  File "/home/hosseins/vllm-v1/vllm/entrypoints/cli/main.py", line 73, in main
    args.dispatch_function(args)
  File "/home/hosseins/vllm-v1/vllm/entrypoints/cli/serve.py", line 33, in cmd
    uvloop.run(run_server(args))
  File "/home/hosseins/miniconda3/envs/vllm-v1/lib/python3.10/site-packages/uvloop/__init__.py", line 82, in run
    return loop.run_until_complete(wrapper())
  File "uvloop/loop.pyx", line 1518, in uvloop.loop.Loop.run_until_complete
  File "/home/hosseins/miniconda3/envs/vllm-v1/lib/python3.10/site-packages/uvloop/__init__.py", line 61, in wrapper
    return await main
  File "/home/hosseins/vllm-v1/vllm/entrypoints/openai/api_server.py", line 947, in run_server
    async with build_async_engine_client(args) as engine_client:
  File "/home/hosseins/miniconda3/envs/vllm-v1/lib/python3.10/contextlib.py", line 199, in __aenter__
    return await anext(self.gen)
  File "/home/hosseins/vllm-v1/vllm/entrypoints/openai/api_server.py", line 139, in build_async_engine_client
    async with build_async_engine_client_from_engine_args(
  File "/home/hosseins/miniconda3/envs/vllm-v1/lib/python3.10/contextlib.py", line 199, in __aenter__
    return await anext(self.gen)
  File "/home/hosseins/vllm-v1/vllm/entrypoints/openai/api_server.py", line 233, in build_async_engine_client_from_engine_args
    raise RuntimeError(
RuntimeError: Engine process failed to start. See stack trace for the root cause.
